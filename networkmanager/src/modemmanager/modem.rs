//! # D-Bus interface proxy for: `org.freedesktop.ModemManager1.Modem`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/ModemManager1/Modem/4' from service 'org.freedesktop.ModemManager1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
	interface = "org.freedesktop.ModemManager1.Modem",
	default_service = "org.freedesktop.ModemManager1",
	default_path = "/org/freedesktop/ModemManager1/Modem/4"
)]
trait Modem {
	/// Command method
	fn command(&self, cmd: &str, timeout: u32) -> zbus::Result<String>;

	/// CreateBearer method
	fn create_bearer(
		&self,
		properties: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
	) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// DeleteBearer method
	fn delete_bearer(&self, bearer: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// Enable method
	fn enable(&self, enable: bool) -> zbus::Result<()>;

	/// FactoryReset method
	fn factory_reset(&self, code: &str) -> zbus::Result<()>;

	/// GetCellInfo method
	fn get_cell_info(
		&self,
	) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

	/// ListBearers method
	fn list_bearers(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// Reset method
	fn reset(&self) -> zbus::Result<()>;

	/// SetCurrentBands method
	fn set_current_bands(&self, bands: &[u32]) -> zbus::Result<()>;

	/// SetCurrentCapabilities method
	fn set_current_capabilities(&self, capabilities: u32) -> zbus::Result<()>;

	/// SetCurrentModes method
	fn set_current_modes(&self, modes: &(u32, u32)) -> zbus::Result<()>;

	/// SetPowerState method
	fn set_power_state(&self, state: u32) -> zbus::Result<()>;

	/// SetPrimarySimSlot method
	fn set_primary_sim_slot(&self, sim_slot: u32) -> zbus::Result<()>;

	/// StateChanged signal
	#[zbus(signal)]
	fn state_changed(&self, old: i32, new: i32, reason: u32) -> zbus::Result<()>;

	/// AccessTechnologies property
	#[zbus(property)]
	fn access_technologies(&self) -> zbus::Result<u32>;

	/// Bearers property
	#[zbus(property)]
	fn bearers(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// CarrierConfiguration property
	#[zbus(property)]
	fn carrier_configuration(&self) -> zbus::Result<String>;

	/// CarrierConfigurationRevision property
	#[zbus(property)]
	fn carrier_configuration_revision(&self) -> zbus::Result<String>;

	/// CurrentBands property
	#[zbus(property)]
	fn current_bands(&self) -> zbus::Result<Vec<u32>>;

	/// CurrentCapabilities property
	#[zbus(property)]
	fn current_capabilities(&self) -> zbus::Result<u32>;

	/// CurrentModes property
	#[zbus(property)]
	fn current_modes(&self) -> zbus::Result<(u32, u32)>;

	/// Device property
	#[zbus(property)]
	fn device(&self) -> zbus::Result<String>;

	/// DeviceIdentifier property
	#[zbus(property)]
	fn device_identifier(&self) -> zbus::Result<String>;

	/// Drivers property
	#[zbus(property)]
	fn drivers(&self) -> zbus::Result<Vec<String>>;

	/// EquipmentIdentifier property
	#[zbus(property)]
	fn equipment_identifier(&self) -> zbus::Result<String>;

	/// HardwareRevision property
	#[zbus(property)]
	fn hardware_revision(&self) -> zbus::Result<String>;

	/// Manufacturer property
	#[zbus(property)]
	fn manufacturer(&self) -> zbus::Result<String>;

	/// MaxActiveBearers property
	#[zbus(property)]
	fn max_active_bearers(&self) -> zbus::Result<u32>;

	/// MaxActiveMultiplexedBearers property
	#[zbus(property)]
	fn max_active_multiplexed_bearers(&self) -> zbus::Result<u32>;

	/// MaxBearers property
	#[zbus(property)]
	fn max_bearers(&self) -> zbus::Result<u32>;

	/// Model property
	#[zbus(property)]
	fn model(&self) -> zbus::Result<String>;

	/// OwnNumbers property
	#[zbus(property)]
	fn own_numbers(&self) -> zbus::Result<Vec<String>>;

	/// Physdev property
	#[zbus(property)]
	fn physdev(&self) -> zbus::Result<String>;

	/// Plugin property
	#[zbus(property)]
	fn plugin(&self) -> zbus::Result<String>;

	/// Ports property
	#[zbus(property)]
	fn ports(&self) -> zbus::Result<Vec<(String, u32)>>;

	/// PowerState property
	#[zbus(property)]
	fn power_state(&self) -> zbus::Result<u32>;

	/// PrimaryPort property
	#[zbus(property)]
	fn primary_port(&self) -> zbus::Result<String>;

	/// PrimarySimSlot property
	#[zbus(property)]
	fn primary_sim_slot(&self) -> zbus::Result<u32>;

	/// Revision property
	#[zbus(property)]
	fn revision(&self) -> zbus::Result<String>;

	/// SignalQuality property
	#[zbus(property)]
	fn signal_quality(&self) -> zbus::Result<(u32, bool)>;

	/// Sim property
	#[zbus(property)]
	fn sim(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// SimSlots property
	#[zbus(property)]
	fn sim_slots(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// State property
	#[zbus(property)]
	fn state(&self) -> zbus::Result<i32>;

	/// StateFailedReason property
	#[zbus(property)]
	fn state_failed_reason(&self) -> zbus::Result<u32>;

	/// SupportedBands property
	#[zbus(property)]
	fn supported_bands(&self) -> zbus::Result<Vec<u32>>;

	/// SupportedCapabilities property
	#[zbus(property)]
	fn supported_capabilities(&self) -> zbus::Result<Vec<u32>>;

	/// SupportedIpFamilies property
	#[zbus(property)]
	fn supported_ip_families(&self) -> zbus::Result<u32>;

	/// SupportedModes property
	#[zbus(property)]
	fn supported_modes(&self) -> zbus::Result<Vec<(u32, u32)>>;

	/// UnlockRequired property
	#[zbus(property)]
	fn unlock_required(&self) -> zbus::Result<u32>;

	/// UnlockRetries property
	#[zbus(property)]
	fn unlock_retries(&self) -> zbus::Result<std::collections::HashMap<u32, u32>>;
}
