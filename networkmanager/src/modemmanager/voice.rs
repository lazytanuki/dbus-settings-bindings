//! # D-Bus interface proxy for: `org.freedesktop.ModemManager1.Modem.Voice`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/ModemManager1/Modem/4' from service 'org.freedesktop.ModemManager1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
	interface = "org.freedesktop.ModemManager1.Modem.Voice",
	default_service = "org.freedesktop.ModemManager1",
	default_path = "/org/freedesktop/ModemManager1/Modem/4"
)]
trait Voice {
	/// CallWaitingQuery method
	fn call_waiting_query(&self) -> zbus::Result<bool>;

	/// CallWaitingSetup method
	fn call_waiting_setup(&self, enable: bool) -> zbus::Result<()>;

	/// CreateCall method
	fn create_call(
		&self,
		properties: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
	) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// DeleteCall method
	fn delete_call(&self, path: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// HangupAll method
	fn hangup_all(&self) -> zbus::Result<()>;

	/// HangupAndAccept method
	fn hangup_and_accept(&self) -> zbus::Result<()>;

	/// HoldAndAccept method
	fn hold_and_accept(&self) -> zbus::Result<()>;

	/// ListCalls method
	fn list_calls(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// Transfer method
	fn transfer(&self) -> zbus::Result<()>;

	/// CallAdded signal
	#[zbus(signal)]
	fn call_added(&self, path: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// CallDeleted signal
	#[zbus(signal)]
	fn call_deleted(&self, path: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// Calls property
	#[zbus(property)]
	fn calls(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// EmergencyOnly property
	#[zbus(property)]
	fn emergency_only(&self) -> zbus::Result<bool>;
}
