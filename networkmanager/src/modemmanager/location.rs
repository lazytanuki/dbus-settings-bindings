//! # D-Bus interface proxy for: `org.freedesktop.ModemManager1.Modem.Location`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/ModemManager1/Modem/4' from service 'org.freedesktop.ModemManager1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
	interface = "org.freedesktop.ModemManager1.Modem.Location",
	default_service = "org.freedesktop.ModemManager1",
	default_path = "/org/freedesktop/ModemManager1/Modem/4"
)]
trait Location {
	/// GetLocation method
	fn get_location(
		&self,
	) -> zbus::Result<std::collections::HashMap<u32, zbus::zvariant::OwnedValue>>;

	/// InjectAssistanceData method
	fn inject_assistance_data(&self, data: &[u8]) -> zbus::Result<()>;

	/// SetGpsRefreshRate method
	fn set_gps_refresh_rate(&self, rate: u32) -> zbus::Result<()>;

	/// SetSuplServer method
	fn set_supl_server(&self, supl: &str) -> zbus::Result<()>;

	/// Setup method
	fn setup(&self, sources: u32, signal_location: bool) -> zbus::Result<()>;

	/// AssistanceDataServers property
	#[zbus(property)]
	fn assistance_data_servers(&self) -> zbus::Result<Vec<String>>;

	/// Capabilities property
	#[zbus(property)]
	fn capabilities(&self) -> zbus::Result<u32>;

	/// Enabled property
	#[zbus(property)]
	fn enabled(&self) -> zbus::Result<u32>;

	/// GpsRefreshRate property
	#[zbus(property)]
	fn gps_refresh_rate(&self) -> zbus::Result<u32>;

	/// Location property
	#[zbus(property)]
	fn location(&self) -> zbus::Result<std::collections::HashMap<u32, zbus::zvariant::OwnedValue>>;

	/// SignalsLocation property
	#[zbus(property)]
	fn signals_location(&self) -> zbus::Result<bool>;

	/// SuplServer property
	#[zbus(property)]
	fn supl_server(&self) -> zbus::Result<String>;

	/// SupportedAssistanceData property
	#[zbus(property)]
	fn supported_assistance_data(&self) -> zbus::Result<u32>;
}
